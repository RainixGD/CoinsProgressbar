#define CAC_PROJ_NAME "Template"
#include "win32cac.h"
#include <extensions/cocos-ext.h>
#include <vector>

#define MEMBERBYOFFSET(type, class, offset) *reinterpret_cast<type*>(reinterpret_cast<uintptr_t>(class) + offset) 
#define MBO MEMBERBYOFFSET

class CoinBarSprite : public CCSprite {
	GameObject* gameObjectRef;
	CCSprite* barRef;
	float levelLength;
	bool isGold;
	CCSprite* activateSprite;
	virtual bool init(GameObject* gameObjectRef, CCSprite* barRef, float levelLength) {
		this->gameObjectRef = gameObjectRef;
		this->barRef = barRef;
		this->levelLength = levelLength;
		this->isGold = (gameObjectRef->m_nObjectID == 142) ? true : false;
		if (!CCSprite::initWithSpriteFrameName(this->isGold ? "secretCoin_b_01_001.png" : "secretCoin_2_b_01_001.png")) return false;
		this->activateSprite = CCSprite::createWithSpriteFrameName(this->isGold ? "secretCoin_01_001.png" : "secretCoin_2_01_001.png");
		this->activateSprite->setPosition(this->getContentSize() / 2);
		this->addChild(activateSprite);
		this->setScale(0.3);
		this->setPositionY(barRef->getContentSize().height / 2);
		return true;
	}
public:
	void update() {
		float fixOffset = 2;
		fixOffset -= this->gameObjectRef->getPositionX() / this->levelLength * 4;
		this->setPositionX((this->gameObjectRef->m_obStartPosition.x + this->gameObjectRef->m_obStartPosOffset.x) / levelLength * this->barRef->getContentSize().width + fixOffset);
		this->activateSprite->setVisible(!this->gameObjectRef->m_bHasBeenActivated);
	}
	static CoinBarSprite* create(GameObject* gameObjectRef, CCSprite* barRef, float levelLength) {
		auto ret = new CoinBarSprite();
		if (ret && ret->init(gameObjectRef, barRef, levelLength)) {
			ret->autorelease();
			return ret;
		}
		CC_SAFE_DELETE(ret);
		return nullptr;
	}
};

std::vector<CoinBarSprite*> coinSprites;

void createCoinSprites(CCArray* objects, CCSprite* bar, float levelLength) {
	CCObject* obj;
	int counter = 500;
	CCARRAY_FOREACH(objects, obj) {
		auto block = reinterpret_cast<GameObject*>(obj);
		if ((block->m_nObjectID == 142 || block->m_nObjectID == 1329) && counter <= 502 ) {
			auto coinSprite = CoinBarSprite::create(block, bar, levelLength);
			bar->addChild(coinSprite, 5, counter++);
			coinSprites.push_back(coinSprite);
		}
	}
}

bool(__thiscall* PlayLayer_resetLevel)(PlayLayer* self);
bool __fastcall PlayLayer_resetLevelH(PlayLayer* self, void*) {
	PlayLayer_resetLevel(self);
	coinSprites.clear();
	CCArray* allObjects = self->getAllObjects();
	auto bar = MBO(CCSprite*, self, 0x404);
	float levelLength = MBO(float, self, 0x3B4);

	bar->removeChildByTag(500);
	bar->removeChildByTag(501);
	bar->removeChildByTag(502);

	createCoinSprites(allObjects, bar, levelLength);

	return true;
}

void(__thiscall* playLayer_update)(PlayLayer* self, float dt);
void __fastcall playLayer_updateH(PlayLayer* self, void*, float dt) {
	playLayer_update(self, dt);
	for (CoinBarSprite* block : coinSprites) {
		block->update();
	}
}


void inject() {
	#if _WIN32
	auto base = reinterpret_cast<uintptr_t>(GetModuleHandle(0));

	MH_CreateHook(
		(PVOID)(base + 0x2029C0),
		playLayer_updateH,
		(LPVOID*)&playLayer_update
	);
	MH_CreateHook(
		(void*)(base + 0x20bf00),
		(void*)&PlayLayer_resetLevelH,
		(void**)&PlayLayer_resetLevel
	);
	

	MH_EnableHook(MH_ALL_HOOKS);
	#endif
}

#if _WIN32
	WIN32CAC_ENTRY(inject)
#endif
